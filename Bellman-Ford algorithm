#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF 99999

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

int main() {
    int V, E; // V = number of vertices, E = number of edges
    struct Edge edges[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter number of edges: ");
    scanf("%d", &E);

    printf("Enter each edge in format (src dest weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    int source;
    printf("Enter source vertex: ");
    scanf("%d", &source);

    int dist[V];
    for (int i = 0; i < V; i++)
        dist[i] = INF;

    dist[source] = 0;

    // Relax all edges V-1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int wt = edges[j].weight;
            if (dist[u] != INF && dist[u] + wt < dist[v]) {
                dist[v] = dist[u] + wt;
            }
        }
    }

    // Check for negative-weight cycles
    int hasCycle = 0;
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int wt = edges[j].weight;
        if (dist[u] != INF && dist[u] + wt < dist[v]) {
            hasCycle = 1;
            break;
        }
    }

    if (hasCycle) {
        printf("\nGraph contains a negative weight cycle!\n");
    } else {
        printf("\nShortest distances from source %d:\n", source);
        for (int i = 0; i < V; i++) {
            printf("To %d : %d\n", i, dist[i]);
        }
    }

    return 0;
}
