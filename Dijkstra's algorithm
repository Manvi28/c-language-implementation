#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF 99999

int cost[MAX][MAX];  // Adjacency matrix
int dist[MAX];       // Distance array
int visited[MAX];    // Visited array

int findMinVertex(int n) {
    int min = INF, minIndex = -1;
    for (int i = 0; i < n; i++) {
        if (!visited[i] && dist[i] < min) {
            min = dist[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void dijkstra(int n, int start) {
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }

    dist[start] = 0;

    for (int i = 0; i < n - 1; i++) {
        int u = findMinVertex(n);
        if (u == -1) break;

        visited[u] = 1;

        for (int v = 0; v < n; v++) {
            if (cost[u][v] && !visited[v] && dist[u] + cost[u][v] < dist[v]) {
                dist[v] = dist[u] + cost[u][v];
            }
        }
    }

    printf("\nShortest distances from source %d:\n", start);
    for (int i = 0; i < n; i++) {
        printf("To %d : %d\n", i, dist[i]);
    }
}

int main() {
    int n, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (0 if no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j)
                cost[i][j] = INF; // No direct edge
        }

    printf("Enter source vertex: ");
    scanf("%d", &start);

    dijkstra(n, start);
    return 0;
}
