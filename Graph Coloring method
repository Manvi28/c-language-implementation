#include <stdio.h>
#include <stdbool.h>

#define V 20  // Max vertices ko bada diya for safety

// Function to print the colors assigned
void printSolution(int color[], int n) {
    printf("Solution Exists:\nFollowing are the assigned colors:\n");
    for (int i = 0; i < n; i++)
        printf("Vertex %d ---> Color %d\n", i, color[i]);
}

// Check if the current color assignment is safe for vertex v
bool isSafe(int v, bool graph[V][V], int color[], int c, int n) {
    for (int i = 0; i < n; i++)
        if (graph[v][i] && color[i] == c)
            return false;
    return true;
}

// Recursive function to solve the coloring problem
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v, int n) {
    if (v == n)
        return true; // All vertices are assigned a color

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c, n)) {
            color[v] = c;

            if (graphColoringUtil(graph, m, color, v + 1, n))
                return true;

            color[v] = 0; // backtrack
        }
    }

    return false;
}

// Main function to solve the problem
bool graphColoring(bool graph[V][V], int m, int n) {
    int color[V];
    for (int i = 0; i < n; i++)
        color[i] = 0; // Initialize all colors as 0

    if (!graphColoringUtil(graph, m, color, 0, n)) {
        printf("Solution does not exist\n");
        return false;
    }

    printSolution(color, n);
    return true;
}

int main() {
    bool graph[V][V];
    int n, m;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    graphColoring(graph, m, n);

    return 0;
}
