stack using linked list

#include <stdio.h>
#include <stdlib.h>
typedef struct node{
    struct node* next;
    int data;
}node;
typedef struct stack{
    node* top;
    int size;
    
}stack;
node* createnode(int data){
    node* newnode=(node*)malloc(sizeof(node));
    if(!newnode){
        printf("memory error");
        return NULL;
    }
    newnode->data=data;
    newnode->next=NULL;
    return newnode;
}
stack* createstack(){
    stack* newstack=(stack*)malloc(sizeof(stack));
    if(!newstack){
        printf("memory error");
        return NULL;
    }
    else{
        newstack->top=NULL;
        newstack->size=0;
    }
    return newstack;
}
int isempty(stack* stack){
    return stack->top==NULL;
}
void push(stack* stack){
    int data;
    printf("enter number: \n");
    scanf("%d",&data);
    node* newnode=createnode(data);
    if(isempty(stack)){
        stack->top=newnode;
    }
    else{
        newnode->next=stack->top;
        stack->top=newnode;
        stack->size++;
    }
}
void pop(stack* stack){
    if(isempty(stack)){
        printf("underflow");
    }
    else{
        int data=stack->top->data;
        node* temp=stack->top;
        stack->top=stack->top->next;
        free(temp);
        stack->size--;
        printf("popped data is %d\n", data);
    }
}
void display(stack* stack){
    node* temp=stack->top;
    while(temp){
        printf("\n %d \n",temp->data);
        temp=temp->next;
    }
}
int main(){
    stack* stack=createstack();
    printf("\n1.push\n2.pop\n3.display\n4.exit\n");
    int ch;
    do{
        printf("enter your choice: ");
        scanf("%d",&ch);
        switch(ch){
            case 1:
            push(stack);
            break;
            case 2:
            pop(stack);
            break;
            case 3:
            display(stack);
            break;
            case 4:
            printf("exit");
            break;
            default:
            printf("enter again");
        }
    }while(ch!=4);
    return 0;
}
